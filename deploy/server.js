const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express
const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Socket.io
const allowedOrigins = [
  'http://localhost:8081',
  'http://localhost:3000',
  'http://192.168.0.30:8081',
  'http://127.0.0.1:8081',
  'https://simple-messenger-7x2u.onrender.com',
  'https://8f2b1687d1e0567a6b3ac5ad45ecbc5a.serveo.net'
];

// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω:
// if (process.env.NODE_ENV === 'production') {
//   allowedOrigins.push('https://yourdomain.com');
// }

const io = socketIo(server, {
  cors: {
    origin: process.env.NODE_ENV === 'production' ? allowedOrigins : "*",
    methods: ["GET", "POST"],
    credentials: true
  }
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public')); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
let messages = [];
let activeUsers = [];
let messageReactions = new Map(); // –•—Ä–∞–Ω–∏–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è

// Rate limiting - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
const userMessageLimits = new Map();
const MESSAGE_LIMIT = 10; // –º–∞–∫—Å–∏–º—É–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π
const TIME_WINDOW = 60000; // –∑–∞ 1 –º–∏–Ω—É—Ç—É

// –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function sanitizeMessage(text) {
  // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS
  return text
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;');
}

function validateMessage(data) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  if (!data || typeof data !== 'object') {
    return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!data.username || typeof data.username !== 'string') {
    return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!data.text || typeof data.text !== 'string') {
    return { valid: false, error: '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' };
  }

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É
  if (data.username.trim().length === 0 || data.username.length > 50) {
    return { valid: false, error: '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' };
  }

  if (data.text.trim().length === 0 || data.text.length > 1000) {
    return { valid: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤' };
  }

  return { valid: true };
}

function checkRateLimit(username) {
  const now = Date.now();
  const userLimit = userMessageLimits.get(username) || { count: 0, resetTime: now + TIME_WINDOW };

  if (now > userLimit.resetTime) {
    // –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞
    userLimit.count = 0;
    userLimit.resetTime = now + TIME_WINDOW;
  }

  if (userLimit.count >= MESSAGE_LIMIT) {
    return { allowed: false, remaining: 0, resetIn: Math.ceil((userLimit.resetTime - now) / 1000) };
  }

  userLimit.count++;
  userMessageLimits.set(username, userLimit);
  return { allowed: true, remaining: MESSAGE_LIMIT - userLimit.count, resetIn: Math.ceil((userLimit.resetTime - now) / 1000) };
}

// –ü—Ä–æ—Å—Ç–æ–π API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/status', (req, res) => {
  res.json({
    message: '–ü—Ä–æ—Å—Ç–æ–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä - —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    users: activeUsers.length,
    messages: messages.length
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º HTML —Ñ–∞–π–ª
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/public/index.html');
});

// Socket.io –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
io.on('connection', (socket) => {
  console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  socket.emit('messageHistory', messages);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
  socket.on('userJoin', (username) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!username || typeof username !== 'string') {
        socket.emit('error', { message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
        return;
      }

      const cleanUsername = username.trim();
      if (cleanUsername.length === 0 || cleanUsername.length > 50) {
        socket.emit('error', { message: '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –∏–º—è
      const existingUser = activeUsers.find(user => user.username.toLowerCase() === cleanUsername.toLowerCase());
      if (existingUser) {
        socket.emit('error', { message: '–≠—Ç–æ –∏–º—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.' });
        return;
      }

      const sanitizedUsername = sanitizeMessage(cleanUsername);
      socket.username = sanitizedUsername;
      activeUsers.push({ id: socket.id, username: sanitizedUsername });

      console.log(`‚úÖ ${sanitizedUsername} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      io.emit('userJoined', { username: sanitizedUsername, userCount: activeUsers.length });
      socket.emit('joinSuccess', { username: sanitizedUsername, userCount: activeUsers.length });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('sendMessage', (data) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const validation = validateMessage(data);
      if (!validation.valid) {
        socket.emit('error', { message: validation.error });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const rateLimitCheck = checkRateLimit(data.username);
      if (!rateLimitCheck.allowed) {
        socket.emit('error', {
          message: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${rateLimitCheck.resetIn} —Å–µ–∫—É–Ω–¥. (${rateLimitCheck.remaining}/${MESSAGE_LIMIT})`,
          type: 'rate_limit',
          resetIn: rateLimitCheck.resetIn
        });
        console.log(`üö´ Rate limit exceeded for ${data.username}: ${MESSAGE_LIMIT} messages per minute`);
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const message = {
        id: Date.now(),
        username: sanitizeMessage(data.username.trim()),
        text: sanitizeMessage(data.text.trim()),
        timestamp: new Date().toISOString(),
        time: new Date().toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        })
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      messages.push(message);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      if (messages.length > 100) {
        messages = messages.slice(-100);
      }

      console.log(`üí¨ ${message.username}: ${message.text} (${rateLimitCheck.remaining}/${MESSAGE_LIMIT} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è)`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      io.emit('newMessage', message);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
  socket.on('typing', (data) => {
    if (data && data.username) {
      socket.broadcast.emit('userTyping', {
        username: data.username
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—á–∞—Ç–∏
  socket.on('stopTyping', (data) => {
    if (data && data.username) {
      socket.broadcast.emit('userStoppedTyping', {
        username: data.username
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
  socket.on('addReaction', (data) => {
    const { messageId, emoji, username } = data;
    
    if (!messageReactions.has(messageId)) {
      messageReactions.set(messageId, {});
    }
    
    const reactions = messageReactions.get(messageId);
    if (!reactions[emoji]) {
      reactions[emoji] = [];
    }
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    Object.keys(reactions).forEach(reactionEmoji => {
      reactions[reactionEmoji] = reactions[reactionEmoji].filter(user => user !== username);
      if (reactions[reactionEmoji].length === 0) {
        delete reactions[reactionEmoji];
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
    reactions[emoji].push(username);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('reactionUpdate', {
      messageId,
      reactions: messageReactions.get(messageId)
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('disconnect', () => {
    // –ù–ï –æ—á–∏—â–∞–µ–º rate limiting –∑–¥–µ—Å—å - –ø—É—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    // userMessageLimits –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –∏ –æ—á–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TIME_WINDOW

    if (socket.username) {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
      activeUsers = activeUsers.filter(user => user.id !== socket.id);

      console.log(`üëã ${socket.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± —É—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      io.emit('userLeft', {
        username: socket.username,
        userCount: activeUsers.length
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—á–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      socket.broadcast.emit('userStoppedTyping', {
        username: socket.username
      });
    } else {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0'; // –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
server.listen(PORT, HOST, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${HOST}:${PORT}`);
  console.log(`üì° –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}`);
  console.log(`üì± –í —Å–µ—Ç–∏: http://192.168.0.30:${PORT}`);
});