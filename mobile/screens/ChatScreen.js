import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from 'react-native';
import io from 'socket.io-client';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
const getServerUrl = () => {
  // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL
  if (typeof window !== 'undefined' && window.location) {
    if (window.location.hostname === 'localhost') {
      return 'http://localhost:3000';
    } else if (window.location.hostname.includes('render.com')) {
      return 'https://simple-messenger-7x2u.onrender.com'; // Render backend
    } else if (window.location.hostname.includes('serveo.net')) {
      return 'https://8f2b1687d1e0567a6b3ac5ad45ecbc5a.serveo.net'; // Serveo backend
    }
    return `http://${window.location.hostname}:3000`;
  }
  // –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
  return 'https://simple-messenger-7x2u.onrender.com';
};

const SERVER_URL = getServerUrl();

export default function ChatScreen({ route }) {
  const { username } = route.params;
  const [messages, setMessages] = useState([]);
  const [messageText, setMessageText] = useState('');
  const [userCount, setUserCount] = useState(0);
  const [isConnected, setIsConnected] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [typingUsers, setTypingUsers] = useState([]);
  const [showEmojiPanel, setShowEmojiPanel] = useState(false);

  const socketRef = useRef(null);
  const flatListRef = useRef(null);
  const typingTimeoutRef = useRef(null);

  // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∑–∏
  const emojis = ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'üò§', 'üò†', 'üò°', 'ü§¨', 'üò±', 'üò®', 'üò∞', 'üò•', 'üò¢', 'ü§î', 'ü§ó', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'üëç', 'üëé', 'üëå', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üëá', '‚òùÔ∏è', '‚úã', 'ü§ö', 'üñêÔ∏è', 'üññ', 'üëã', 'ü§è', 'üí™', 'ü¶æ', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üíÉ', 'üï∫', 'üëØ', 'üßó', 'üèá', '‚õ∑Ô∏è', 'üèÇ', 'üèåÔ∏è', 'üèÑ', 'üö£', 'üèä', '‚õπÔ∏è', 'üèãÔ∏è', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω', 'ü§æ', 'ü§π', 'üßò', 'üõÄ', 'üõå', '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', 'üî•', '‚ú®', 'üí´', '‚≠ê', 'üåü', 'üí•', 'üíØ', 'üí¢', 'üí®', 'üí§', 'üï≥Ô∏è', 'üéâ', 'üéä', 'üôà', 'üôâ', 'üôä', 'üíØ', 'üí´', '‚ö°', 'üî•', 'üíù', 'üéÅ', 'üéà', 'üéÄ', 'üéä', 'üéâ'];

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    socketRef.current = io(SERVER_URL);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socketRef.current.on('connect', () => {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
      setIsConnected(true);

      // –°–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socketRef.current.emit('userJoin', username);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socketRef.current.on('disconnect', () => {
      console.log('–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      setIsConnected(false);
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    socketRef.current.on('messageHistory', (history) => {
      setMessages(history);
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    socketRef.current.on('newMessage', (message) => {
      setMessages(prev => [...prev, message]);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
    socketRef.current.on('userTyping', (data) => {
      setTypingUsers(prev => {
        if (!prev.includes(data.username) && data.username !== username) {
          return [...prev, data.username];
        }
        return prev;
      });
    });

    socketRef.current.on('userStoppedTyping', (data) => {
      setTypingUsers(prev => prev.filter(user => user !== data.username));
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    socketRef.current.on('userJoined', (data) => {
      setUserCount(data.userCount);
    });

    socketRef.current.on('userLeft', (data) => {
      setUserCount(data.userCount);
    });

    socketRef.current.on('joinSuccess', (data) => {
      setUserCount(data.userCount);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    socketRef.current.on('error', (errorData) => {
      console.error('–û—à–∏–±–∫–∞ Socket.io:', errorData);
      const message = errorData.message || '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      setErrorMessage(message);

      // –î–ª—è rate limit –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª—å—à–µ
      const timeout = errorData.type === 'rate_limit' ? 10000 : 5000;
      setTimeout(() => {
        setErrorMessage('');
      }, timeout);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è rate limit
      if (errorData.type === 'rate_limit') {
        Alert.alert(
          '‚ö†Ô∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π',
          `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${errorData.resetIn} —Å–µ–∫—É–Ω–¥.`,
          [{ text: 'OK' }]
        );
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
    };
  }, [username]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)
  useEffect(() => {
    if (messages.length > 0 && flatListRef.current) {
      // –ü—Ä–æ—Å—Ç–æ–π scrollToEnd –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [messages]);

  const sendMessage = () => {
    if (!messageText.trim() || !isConnected) return;

    const currentTime = new Date().toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socketRef.current.emit('sendMessage', {
      username: username,
      text: messageText.trim(),
      time: currentTime
    });

    setMessageText('');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socketRef.current.emit('stopTyping', { username: username });
  };

  const handleTextChange = (text) => {
    setMessageText(text);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –ø–µ—á–∞—Ç–∏
    if (text.trim() && isConnected) {
      socketRef.current.emit('typing', { username: username });
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—á–∞—Ç–∏
      typingTimeoutRef.current = setTimeout(() => {
        socketRef.current.emit('stopTyping', { username: username });
      }, 1000); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—á–∞—Ç—å
      socketRef.current.emit('stopTyping', { username: username });
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ–¥–∑–∏
  const toggleEmojiPanel = () => {
    setShowEmojiPanel(!showEmojiPanel);
  };

  const addEmoji = (emoji) => {
    setMessageText(prev => prev + emoji);
    setShowEmojiPanel(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
  };

  const renderMessage = ({ item }) => {
    const isMyMessage = item.username === username;

    return (
      <View style={[
        styles.messageContainer,
        isMyMessage ? styles.myMessage : styles.otherMessage
      ]}>
        {!isMyMessage && (
          <Text style={styles.messageUsername}>{item.username}</Text>
        )}
        <Text style={styles.messageText}>{item.text}</Text>
        <Text style={styles.messageTime}>{item.time}</Text>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <View style={styles.statusBar}>
        <Text style={styles.statusText}>
          {isConnected ? `üü¢ –û–Ω–ª–∞–π–Ω ‚Ä¢ ${userCount} —á–µ–ª.` : 'üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...'}
        </Text>
      </View>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {errorMessage ? (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>‚ö†Ô∏è {errorMessage}</Text>
        </View>
      ) : null}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <View style={{ flex: 1 }}>
        {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <FlatList
          ref={flatListRef}
          data={messages}
          keyExtractor={(item) => item.id.toString()}
          renderItem={renderMessage}
          style={{ flex: 1 }}
          contentContainerStyle={{ padding: 10, paddingBottom: 20 }}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
        />

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
        {typingUsers.length > 0 && (
          <View style={styles.typingIndicator}>
            <Text style={styles.typingText}>
              {typingUsers.length === 1 
                ? `${typingUsers[0]} –ø–µ—á–∞—Ç–∞–µ—Ç...` 
                : `${typingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—á–∞—Ç–∞—é—Ç...`
              }
            </Text>
          </View>
        )}
      </View>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ - –í–°–ï–ì–î–ê –í–ò–î–ò–ú–û–ï */}
      <View style={styles.inputContainer}>
        {/* –≠–º–æ–¥–∑–∏ –ø–∞–Ω–µ–ª—å */}
        {showEmojiPanel && (
          <View style={styles.emojiPanel}>
            <FlatList
              data={emojis}
              numColumns={8}
              keyExtractor={(item, index) => index.toString()}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={styles.emojiButton}
                  onPress={() => addEmoji(item)}
                >
                  <Text style={styles.emojiText}>{item}</Text>
                </TouchableOpacity>
              )}
              contentContainerStyle={styles.emojiGrid}
            />
          </View>
        )}
        
        {/* –°—Ç—Ä–æ–∫–∞ –≤–≤–æ–¥–∞ */}
        <View style={styles.inputRow}>
          <TouchableOpacity
            style={styles.emojiToggle}
            onPress={toggleEmojiPanel}
          >
            <Text style={styles.emojiToggleText}>üòÄ</Text>
          </TouchableOpacity>
          
          <TextInput
            style={styles.textInput}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            value={messageText}
            onChangeText={handleTextChange}
            returnKeyType="send"
            onSubmitEditing={sendMessage}
            placeholderTextColor="#999"
          />
          
          <TouchableOpacity
            style={[
              styles.sendButton,
              (!messageText.trim() || !isConnected) && styles.sendButtonDisabled
            ]}
            onPress={sendMessage}
            disabled={!messageText.trim() || !isConnected}
          >
            <Text style={styles.sendButtonText}>‚û§</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <View style={styles.debugContainer}>
        <Text style={styles.debugText}>
          –ü–æ–ª–µ –≤–≤–æ–¥–∞: '{messageText}' | –ü–æ–¥–∫–ª—é—á–µ–Ω: {isConnected ? '–î–∞' : '–ù–µ—Ç'} | –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {messageText.trim() && isConnected ? '–î–∞' : '–ù–µ—Ç'}
        </Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  statusBar: {
    backgroundColor: '#2196F3',
    paddingVertical: 10,
    paddingHorizontal: 15,
  },
  statusText: {
    fontSize: 14,
    color: '#fff',
    textAlign: 'center',
    fontWeight: 'bold',
  },
  messageContainer: {
    maxWidth: '80%',
    marginVertical: 4,
    padding: 12,
    borderRadius: 18,
  },
  myMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#2196F3',
  },
  otherMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  messageUsername: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#666',
    marginBottom: 4,
  },
  messageText: {
    fontSize: 16,
    color: '#333',
    lineHeight: 20,
  },
  messageTime: {
    fontSize: 11,
    color: '#999',
    marginTop: 4,
    textAlign: 'right',
  },
  // –ü–†–û–°–¢–û–ï –ø–æ–ª–µ –≤–≤–æ–¥–∞
  inputContainer: {
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    paddingBottom: 20, // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 10,
    gap: 10,
  },
  emojiToggle: {
    width: 45,
    height: 45,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
    borderRadius: 22.5,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  emojiToggleText: {
    fontSize: 20,
  },
  textInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 25,
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: '#fff',
    minHeight: 45,
  },
  sendButton: {
    width: 45,
    height: 45,
    backgroundColor: '#2196F3',
    borderRadius: 22.5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sendButtonDisabled: {
    backgroundColor: '#ccc',
  },
  sendButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  errorContainer: {
    backgroundColor: '#ffebee',
    borderLeftWidth: 4,
    borderLeftColor: '#f44336',
    padding: 12,
    marginHorizontal: 10,
    marginVertical: 5,
    borderRadius: 4,
  },
  errorText: {
    color: '#c62828',
    fontSize: 14,
    textAlign: 'center',
  },
  debugContainer: {
    padding: 10,
    backgroundColor: '#e3f2fd',
    borderTopWidth: 1,
    borderTopColor: '#2196F3',
  },
  debugText: {
    fontSize: 12,
    color: '#1976d2',
    textAlign: 'center',
  },
  typingIndicator: {
    backgroundColor: '#e3f2fd',
    paddingHorizontal: 15,
    paddingVertical: 8,
    marginHorizontal: 10,
    marginBottom: 5,
    borderRadius: 15,
  },
  typingText: {
    color: '#1976d2',
    fontSize: 14,
    fontStyle: 'italic',
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è —ç–º–æ–¥–∑–∏ –ø–∞–Ω–µ–ª–∏
  emojiPanel: {
    backgroundColor: '#f9f9f9',
    maxHeight: 200,
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    paddingVertical: 10,
  },
  emojiGrid: {
    paddingHorizontal: 10,
  },
  emojiButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    margin: 2,
    borderRadius: 8,
  },
  emojiText: {
    fontSize: 24,
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 10,
    paddingVertical: 5,
  },
  emojiToggle: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 8,
    backgroundColor: '#f0f0f0',
    borderRadius: 20,
  },
  emojiToggleText: {
    fontSize: 20,
  },
});